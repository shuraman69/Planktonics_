{"version":3,"sources":["components/Login/Login.module.css","components/LoginForm/LoginForm.module.css","reportWebVitals.js","components/commons/avatars/3.jpg","components/commons/avatars/2jpg.jpg","redux/users.js","components/commons/avatars/1jpg.jpg","components/commons/avatars/4.jpg","components/commons/floodChatStickers/st1.png","components/commons/floodChatStickers/st2.png","components/commons/floodChatStickers/st3.png","components/commons/floodChatStickers/st4.png","components/commons/floodChatStickers/st5.png","redux/reducers/floodChatReducer.js","components/helpers/helpers.js","redux/reducers/workChatReducer.js","redux/reducers/loginReducer.js","redux/store.js","components/Sider/Sider.jsx","components/LoginForm/LoginForm.jsx","components/LoginForm/LoginFormContainer.jsx","components/Login/Login.jsx","components/Content/Header/Header.js","components/Content/Header/HeaderContainer.js","components/Profile/profileComponents/Avatar.js","components/Profile/profileComponents/ProfileInfo.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js","components/Stickers/StickerMessage.js","components/Message/Message.js","components/WorkChat/WorkChat.js","components/WorkChat/WorkChatContainer.js","components/Stickers/Stickers.js","components/FloodChat/FloodChat.js","components/EditForm/EditForm.js","components/EditForm/EditMessageModal.js","components/FloodChat/FloodChatContainer.js","components/Content/Content.jsx","components/Content/ContentContainer.jsx","App.js","AppContainer.js","index.js","components/WorkChat/WorkChat.module.css","components/Message/Message.module.css","components/Content/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","users","id","login","password","name","nickname","avatar","a2","a3","SET_FLOOD_MESSAGE","SET_FLOOD_MESSAGE_FROM_LS","SEND_FLOOD_STICKER","EDIT_FLOOD_MESSAGE","DELETE_FLOOD_MESSAGE","initialState","floodChat","floodStickers","sticker","st1","st2","st3","st4","st5","sendFloodMessageThunk","floodMessage","dispatch","getState","type","setFloodMessage","chat","JSON","stringify","flood","setMessageToLS","sendFloodStickerThunk","message","stickerId","sendFloodSticker","deleteFloodMessage","messageId","deleteFloodMessageAC","editFloodMessage","newMessage","editFloodMessageAC","floodChatReducer","state","action","messages","filter","m","map","item","localStorage","getItem","removeItem","setItem","takeMessagesFromLS","item1","item2","workMessages","parse","floodMessages","setMessagesFromLS","SET_WORK_MESSAGE","SET_WORK_MESSAGE_FROM_LS","DELETE_WORK_MESSAGE","workChat","sendMessageThunk","workMessage","setMessage","work","deleteWorkMessage","deleteWorkMessageAC","workChatReducer","LOGIN","LOG_OUT","USERS","user","loginAC","loginReducer","token","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","window","Sider","Layout","SiderFC","trigger","collapsible","theme","mode","Item","icon","UserOutlined","to","ApartmentOutlined","SmileOutlined","LoginForm","onSubmit","loginValue","passwordValue","onLoginChange","onPasswordChange","style","styles","event","htmlFor","value","onChange","placeholder","LoginFormContainer","useState","setLogin","setPassword","useDispatch","history","useHistory","preventDefault","forEach","u","alert","loginThunk","push","target","Login","className","container","Header","HeaderFC","logout","onClick","login_btn","HeaderContainer","useSelector","avatarStyles","maxWidth","maxHeight","Avatar","src","alt","ProfileInfo","userName","display","justifyContent","Profile","ProfileContainer","StickerMessage","sticker_m","Message","actionId","onEditMessage","main","main_message","param","deleteMessage","date","WorkChat","sendMessage","textAreaValue","onTextAreaValueChange","messagesArray","setVisible","chat_container","WorkChatContainer","getChatData","deleteId","setActionId","setTextAreaValue","workChatData","useEffect","Date","toLocaleTimeString","now","Stickers","stickers","sendSticker","s","FloodChat","chat_f","EditForm","setNewMessage","EditMessageModal","visible","title","footer","FloodChatContainer","floodChatData","floodTextAreaValue","setFloodTextAreaValue","messId","setMessId","Content","contentStyles","margin","padding","minHeight","ContentFC","path","render","ContentContainer","messagesOfWorkChat","messagesOfFloodChat","App","AppContainer","userNickname","ReactDOM","StrictMode","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,UAAY,2B,oBCA9BD,EAAOC,QAAU,CAAC,YAAc,iC,mGCWjBC,G,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gCCPC,MAA0B,8BCA1B,MAA0B,iCCuC1BQ,EAlCD,CACV,CACIC,GAAI,IACJC,MAAO,MACPC,SAAU,MACVC,KAAM,OACNC,SAAU,WACVC,OCZO,IAA0B,kCDcrC,CACIL,GAAI,IACJC,MAAO,MACPC,SAAU,MACVC,KAAM,OACNC,SAAU,eACVC,OEpBO,IAA0B,+BFsBrC,CACIL,GAAI,IACJC,MAAO,MACPC,SAAU,MACVC,KAAM,OACNC,SAAU,cACVC,OAAQC,GAEZ,CACIN,GAAI,IACJC,MAAO,MACPC,SAAU,MACVC,KAAM,QACNC,SAAU,WACVC,OAAQE,I,QGpCD,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCOnCC,EAAoB,oBACpBC,EAA4B,4BAC5BC,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAuB,uBAEvBC,EAAe,CACjBC,UAAW,GACXC,cAAe,CACX,CAACC,QAASC,EAAKjB,GAAI,GACnB,CAACgB,QAASE,EAAKlB,GAAI,GACnB,CAACgB,QAASG,EAAKnB,GAAI,GACnB,CAACgB,QAASI,EAAKpB,GAAI,GACnB,CAACgB,QAASK,EAAKrB,GAAI,KA+CdsB,EAAwB,SAACC,GAClC,OAAO,SAACC,EAAUC,GACdD,EAPuB,SAACD,GAAD,MAAmB,CAACG,KAAMlB,EAAmBe,gBAO3DI,CAAgBJ,IACzB,IAAMK,EAAOC,KAAKC,UAAUL,IAAWM,MAAMjB,WAC7CkB,EAAe,gBAAiBJ,KAG3BK,EAAwB,SAACC,GAClC,OAAO,SAACV,EAAUC,GACdS,EAAQlB,QAAUS,IAAWM,MAAMhB,cAAcmB,EAAQC,WACzDX,EAdwB,SAACU,GAAD,MAAc,CAACR,KAAMhB,EAAoBwB,WAcxDE,CAAiBF,IAC1B,IAAMN,EAAOC,KAAKC,UAAUL,IAAWM,MAAMjB,WAC7CkB,EAAe,gBAAiBJ,KAG3BS,EAAqB,SAACC,GAC/B,OAAO,SAACd,EAAUC,GACdD,EApBqB,SAACc,GAAD,MAAgB,CAACZ,KAAMd,EAAsB0B,aAoBzDC,CAAqBD,IAC9B,IAAMV,EAAOC,KAAKC,UAAUL,IAAWM,MAAMjB,WAC7CkB,EAAe,gBAAiBJ,KAG3BY,EAAmB,SAACxC,EAAIyC,GACjC,OAAO,SAACjB,EAAUC,GACdD,EAzBmB,SAACc,EAAWG,GAAZ,MAA4B,CAACf,KAAMf,EAAoB2B,YAAWG,cAyB5EC,CAAmB1C,EAAIyC,IAChC,IAAMb,EAAOC,KAAKC,UAAUL,IAAWM,MAAMjB,WAC7CkB,EAAe,gBAAiBJ,KAIzBe,EA1EU,WAAmC,IAAlCC,EAAiC,uDAAzB/B,EAAcgC,EAAW,uCACvD,OAAQA,EAAOnB,MACX,KAAKlB,EACD,OAAO,2BACAoC,GADP,IAEI9B,UAAU,GAAD,mBAAM8B,EAAM9B,WAAZ,CAAuB+B,EAAOtB,iBAE/C,KAAKb,EACD,OAAO,2BACAkC,GADP,IAEI9B,UAAU,GAAD,mBAAM8B,EAAM9B,WAAZ,CAAuB+B,EAAOX,YAE/C,KAAKzB,EACD,OAAO,2BACAmC,GADP,IAEI9B,UAAW+B,EAAOC,WAE1B,KAAKlC,EACD,OAAO,2BACAgC,GADP,IAEI9B,UAAW8B,EAAM9B,UAAUiC,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO6C,EAAOP,eAE/D,KAAK3B,EACD,OAAO,2BACAiC,GADP,IAEI9B,UAAW8B,EAAM9B,UAAUmC,KAAI,SAAAD,GAC3B,GAAIA,EAAEhD,IAAM6C,EAAOP,UACf,OAAO,2BACAU,GADP,IAEId,QAASW,EAAOJ,kBAKpC,QACI,OAAOG,ICvDNZ,EAAiB,SAACkB,EAAMtB,GAC7BuB,aAAaC,QAAQF,IACrBC,aAAaE,WAAWH,GACxBC,aAAaG,QAAQJ,EAAMtB,IAE3BuB,aAAaG,QAAQJ,EAAMtB,IAItB2B,EAAqB,SAACC,EAAOC,EAAOjC,GAC7C,IAAMkC,EAAe7B,KAAK8B,MAAMR,aAAaC,QAAQI,IAC/CI,EAAgB/B,KAAK8B,MAAMR,aAAaC,QAAQK,IAEhDC,GACFlC,EAASqC,EAAkBH,IAEzBE,GACFpC,ED6C6C,CAACE,KAAMjB,EAA2BqC,SC7C/Cc,KClBlCE,EAAmB,mBACnBC,EAA2B,2BAC3BC,EAAsB,sBACtBnD,EAAe,CACjBoD,SAAU,IAwBDJ,EAAoB,SAACf,GAAD,MAAe,CAACpB,KAAMqC,EAA0BjB,aAEpEoB,EAAmB,SAACC,GAC7B,OAAO,SAAC3C,EAAUC,GACdD,EALkB,SAAC2C,GAAD,MAAkB,CAACzC,KAAMoC,EAAkBK,eAKpDC,CAAWD,IACpB,IAAMvC,EAAOC,KAAKC,UAAUL,IAAW4C,KAAKJ,UAC5CjC,EAAe,eAAgBJ,KAG1B0C,EAAoB,SAAChC,GAC9B,OAAO,SAACd,EAAUC,GACdD,EAVoB,SAACc,GAAD,MAAgB,CAACZ,KAAMsC,EAAqB1B,aAUvDiC,CAAoBjC,IAC7B,IAAMV,EAAOC,KAAKC,UAAUL,IAAW4C,KAAKJ,UAC5CjC,EAAe,eAAgBJ,KAIxB4C,EAvCS,WAAmC,IAAlC5B,EAAiC,uDAAzB/B,EAAcgC,EAAW,uCACtD,OAAQA,EAAOnB,MACX,KAAKoC,EACD,OAAO,2BACAlB,GADP,IAEIqB,SAAS,GAAD,mBAAMrB,EAAMqB,UAAZ,CAAsBpB,EAAOsB,gBAE7C,KAAKJ,EACD,OAAO,2BACAnB,GADP,IAEIqB,SAAUpB,EAAOC,WAEzB,KAAKkB,EACD,OAAO,2BACApB,GADP,IAEIqB,SAAUrB,EAAMqB,SAASlB,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO6C,EAAOP,eAE7D,QACI,OAAOM,ICrBb6B,EAAQ,QACRC,EAAU,UACVC,EAAQ5E,EACRc,EAAe,CACjB+D,KAAM,CACF3E,MAAO,KACPC,SAAU,KACVC,KAAM,KACNC,SAAU,KACVC,OAAQ,OA0BHwE,EAAU,SAAC5E,EAAOC,EAAUC,EAAMC,EAAUC,GAAlC,MAA8C,CACjEqB,KAAM+C,EACNxE,QACAC,WACAC,OACAC,WACAC,WAsBWyE,EAnDM,WAAmC,IAAlClC,EAAiC,uDAAzB/B,EAAcgC,EAAW,uCACnD,OAAQA,EAAOnB,MACX,KAAK+C,EACD,OAAO,2BACA7B,GADP,IAEIgC,KAAM,CACF3E,MAAO4C,EAAO5C,MACdC,SAAU2C,EAAO3C,SACjBC,KAAM0C,EAAO1C,KACbC,SAAUyC,EAAOzC,SACjBC,OAAQwC,EAAOxC,UAG3B,KAAKqE,EACD,OAAO,2BACA9B,GADP,IAEIgC,KAAM,CAAC3E,MAAO,KAAMC,SAAU,KAAM6E,MAAO,QAEnD,QACI,OAAOnC,I,QC7BboC,EAAcC,YAAgB,CAChChF,MAAO6E,EACPT,KAAMG,EACNzC,MAAOY,IAELuC,EAAQC,YAAYH,EAAaI,YAAgBC,MACvDC,OAAOJ,MAAQA,EACAA,Q,sECRRK,GAASC,IAATD,MAqBQE,OAnBf,WACI,OACI,eAACF,GAAD,CAAOG,QAAS,KAAMC,aAAW,EAAjC,SACI,gBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,SAAxB,UACI,eAAC,IAAKC,KAAN,CAAmBC,KAAM,eAACC,GAAA,EAAD,IAAzB,SACI,eAAC,IAAD,CAASC,GAAG,WAAZ,yDADW,KAGf,eAAC,IAAKH,KAAN,CAAmBC,KAAM,eAACG,GAAA,EAAD,IAAzB,SACI,eAAC,IAAD,CAASD,GAAG,aAAZ,4EADW,KAGf,eAAC,IAAKH,KAAN,CAAmBC,KAAM,eAACI,GAAA,EAAD,IAAzB,SACI,eAAC,IAAD,CAASF,GAAG,cAAZ,yFADW,W,4DCDhBG,GAbG,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,SAASC,EAA+D,EAA/DA,WAAWC,EAAoD,EAApDA,cAAeC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,iBAClE,OACI,wBAAMC,MAAOC,KAAQN,SAAU,SAAAO,GAAK,OAAIP,EAASO,IAAjD,UACI,wBAAOC,QAAQ,QAAf,SACI,wBAAOC,MAAOR,EAAYS,SAAU,SAAAH,GAAK,OAAIJ,EAAcI,IAAQlF,KAAK,OAAOsF,YAAY,yGAE/F,wBAAOH,QAAQ,WAAf,SACI,wBAAOC,MAAOP,EAAeQ,SAAU,SAAAH,GAAK,OAAIH,EAAiBG,IAAQlF,KAAK,OAAOsF,YAAY,+GAErG,yBAAQtF,KAAK,SAAb,gDCYGuF,GAnBY,WAAO,IAAD,EACHC,mBAAS,IADN,oBACtBjH,EADsB,KACfkH,EADe,OAEGD,mBAAS,IAFZ,oBAEtBhH,EAFsB,KAEZkH,EAFY,KAGvB5F,EAAW6F,cACXC,EAAUC,eAYhB,OAAO,eAAC,GAAD,CAAWhB,cAAerG,EAAUoG,WAAYrG,EAAOoG,SAL7C,SAACO,GACdA,EAAMY,iBACNhG,EJ+BkB,SAACvB,EAAOC,GAC9B,OAAO,SAACsB,EAAUC,GAEdkD,EAAM8C,SAAQ,SAAAC,GACV,GAAIA,EAAEzH,QAAUA,GAASyH,EAAExH,WAAaA,EAAU,CAE9CsB,EAASqD,EAAQ5E,EAAOC,EAAUwH,EAAEvH,KAAMuH,EAAEtH,SAAUsH,EAAErH,SAExD,IAAMuE,EAAOnD,IAAWxB,MAAM2E,KAC9BzB,aAAaG,QAAQ,OAAQzB,KAAKC,UAAU8C,IAE5CrB,EAAmB,eAAgB,gBAAiB/B,GACpDmG,MAAM,qDI3CLC,CAAW3H,EAAOC,IAC3BoH,EAAQO,KAAK,aAGCpB,iBATO,SAACG,GACtBQ,EAAYR,EAAMkB,OAAOhB,QAQyBN,cAZhC,SAACI,GACnBO,EAASP,EAAMkB,OAAOhB,WCDfiB,GARD,WACV,OACI,sBAAKC,UAAWrB,KAAOsB,UAAvB,SACI,eAAC,GAAD,O,oBCDLC,GAAU1C,IAAV0C,OAcQC,OAZf,YAAmC,IAAhBC,EAAe,EAAfA,OAAOnI,EAAQ,EAARA,MACtB,OACI,eAACiI,GAAD,CAAQF,UAAU,yBAAlB,SACI,uBAAKA,UAAWrB,KAAOsB,UAAvB,UACI,sBAAKD,UAAWrB,KAAO1G,MAAvB,SAAiCA,EAAF,6DAAsBA,GAAQ,mFAC7D,uBAAMoI,QAAS,kBAAMD,KAAUJ,UAAWrB,KAAO2B,UAAjD,kDCQDC,OAdf,WACI,IAAM/G,EAAW6F,cACXpH,EAAQuI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAK3E,SAMpD,OACI,eAAC,GAAD,CAAUmI,OANC,WACX5G,EPsCuB,CAACE,KAAMgD,IOrC9BvB,aAAaE,WAAW,QACxBsE,MAAM,gDAGoB1H,MAAOA,KCfnCwI,GAAe,CACjBC,SAAU,QACVC,UAAW,SASAC,GAPA,SAAC,GAAc,IAAbvI,EAAY,EAAZA,OACb,OACI,+BACI,sBAAKqG,MAAO+B,GAAcI,IAAKxI,EAAQyI,IAAI,cCExCC,GATK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,SAAU/I,EAAqB,EAArBA,MAAOG,EAAc,EAAdA,SACnC,OACI,iCACI,qFAAkB4I,KAClB,6GAAsB5I,KACtB,iGAAoBH,SCF1B0G,GAAS,CACXsC,QAAS,OACTC,eAAgB,eAChBR,SAAU,SAUCS,GARC,SAAC,GAAyC,IAAxC9I,EAAuC,EAAvCA,OAAQ2I,EAA+B,EAA/BA,SAAU/I,EAAqB,EAArBA,MAAOG,EAAc,EAAdA,SACvC,OACI,uBAAKsG,MAAOC,GAAZ,UACI,eAAC,GAAD,CAAQtG,OAAQA,IAChB,eAAC,GAAD,CAAa2I,SAAUA,EAAU5I,SAAUA,EAAUH,MAAOA,QCGzDmJ,GAXU,WACrB,IAAM9B,EAAUC,eACVlH,EAASmI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAKvE,UAC/C2I,EAAWR,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAKzE,QACjDC,EAAWoI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAKxE,YACjDH,EAAQuI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAK3E,SAIpD,OAHKA,GACDqH,EAAQO,KAAK,UAEV,eAAC,GAAD,CAASxH,OAAQA,EAAQD,SAAUA,EAAU4I,SAAUA,EAAU/I,MAAOA,K,wCCJpEoJ,GAPQ,SAAC,GAAe,IAAdrI,EAAa,EAAbA,QACrB,OACI,+BACI,sBAAKgH,UAAS,UAAKrB,KAAO3F,QAAZ,YAAuB2F,KAAO2C,WAAaT,IAAK7H,EAAS8H,IAAI,eCoBxES,GArBC,SAAC,GAA4C,IAA3CvG,EAA0C,EAA1CA,EAAGxB,EAAuC,EAAvCA,SAAUgI,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,cACrC,OACI,uBAAKzB,UAAWrB,KAAOsB,UAAvB,UACI,uBAAKD,UAAWrB,KAAO+C,KAAvB,UACI,sBAAK1B,UAAWrB,KAAOtG,OAAvB,SACI,sBAAK2H,UAAWrB,KAAOtG,OAAQwI,IAAK7F,EAAE3C,WAE1C,uBAAK2H,UAAWrB,KAAOgD,aAAvB,UACI,sBAAK3B,UAAWrB,KAAOxG,KAAvB,SAA8B6C,EAAE7C,OAC/B6C,EAAEhC,QAAU,eAAC,GAAD,CAAgBA,QAASgC,EAAEhC,QAAQA,UAC5C,sBAAKgH,UAAWrB,KAAOzE,QAAvB,SAAiCc,EAAEd,gBAG/C,iCACI,uBAAMmG,QAAS,kBAAMoB,EAAczG,EAAEhD,KAArC,gCACA,uBAAMqI,QAAS,kBfIF,SAAC/F,EAAWsH,EAAOpI,GAExCA,EADAoI,EACStF,EAAkBhC,GAElBD,EAAmBC,IeRCuH,CAAc7G,EAAEhD,GAAIwJ,EAAUhI,IAAnD,sCACA,sBAAKwG,UAAWrB,KAAOmD,KAAvB,SAA8B9G,EAAE8G,cCSjCC,GA1BE,SAAC,GAQO,IAPHC,EAOE,EAPFA,YACAC,EAME,EANFA,cACAC,EAKE,EALFA,sBACAC,EAIE,EAJFA,cACA3I,EAGE,EAHFA,SACAgI,EAEE,EAFFA,SACAY,EACE,EADFA,WAElB,OACI,uBAAKpC,UAAWrB,KAAOsB,UAAvB,UACI,kVACA,sBAAKD,UAAWrB,KAAO0D,eAAvB,SACI,sBAAKrC,UAAWrB,KAAO/E,KAAvB,SACOuI,EAAgBA,EAAclH,KAAI,SAAAD,GAAC,OAAI,eAAC,GAAD,CAASoH,WAAYA,EAAYZ,SAAUA,EAClChI,SAAUA,EACVwB,EAAGA,GADsBA,EAAEhD,OAChB,gFAGtE,uBAAKgI,UAAWrB,KAAOzE,QAAvB,UACI,2BAAU6E,SAAU,SAAAH,GAAK,OAAIsD,EAAsBtD,IAAQzG,KAAK,YAChE,yBAAQ2G,MAAOmD,EAAe5B,QAAS,kBAAM2B,KAA7C,2ECYDM,GAhCW,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,SAAUhB,EAA2B,EAA3BA,SAAUiB,EAAiB,EAAjBA,YAAiB,EAChCvD,qBADgC,oBACnE+C,EADmE,KACpDS,EADoD,KAEpEC,EAAeJ,GAAY,GACjCK,qBAAU,WACNH,GAAY,KACb,IACEE,EAAa1K,OACd0K,EAAarD,QAAQO,KAAK,UAe9B,OAAO,eAAC,GAAD,CAAUoC,cAAeA,EACfC,sBAda,SAACtD,GAC3B8D,EAAiB9D,EAAMkB,OAAOhB,QAcjBkD,YAZG,WAChB,IAAM9H,EAAU,CACZA,QAAS+H,EACT9J,KAAMwK,EAAaxK,KACnBE,OAAQsK,EAAatK,OACrByJ,MAAM,IAAIe,MAAOC,qBACjB9K,GAAI6K,KAAKE,OAEbJ,EAAanJ,SAAS0C,EAAiBhC,KAK1BV,SAAUmJ,EAAanJ,SACvB2I,cAAeQ,EAAaR,cAC5BK,SAAUA,EACVhB,SAAUA,EACVY,WAAYO,EAAaP,cCtB/BY,GATE,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YACzB,OACI,sBAAKlD,UAAWrB,KAAOsE,SAAvB,SACKA,EAAShI,KAAI,SAAAkI,GAAC,OAAI,sBAAK9C,QAAS,kBAAM6C,EAAYC,EAAEnL,KAAKA,GAAImL,EAAEnL,GAAIgI,UAAWrB,KAAO3F,QAC9D8H,IAAI,UACJD,IAAKsC,EAAEnK,gBC4B5BoK,GA/BG,SAAC,GAUO,IATHpB,EASE,EATFA,YACAC,EAQE,EARFA,cACAC,EAOE,EAPFA,sBACAC,EAME,EANFA,cACAc,EAKE,EALFA,SACAC,EAIE,EAJFA,YACA1B,EAGE,EAHFA,SACAhI,EAEE,EAFFA,SACAiI,EACE,EADFA,cAEnB,OACI,uBAAKzB,UAAWrB,KAAOsB,UAAvB,UACI,gWACA,uBAAKD,UAAWrB,KAAO0D,eAAvB,UACI,sBAAKrC,UAAWrB,KAAO0E,OAAvB,WACOlB,GAAiBA,EAAclH,KAAI,SAAAD,GAAC,OAAI,eAAC,GAAD,CACvCyG,cAAeA,EACfjI,SAAUA,EACVgI,SAAUA,EACVxG,EAAGA,SAEX,eAAC,GAAD,CAAUkI,YAAaA,EAAaD,SAAUA,OAElD,uBAAKjD,UAAWrB,KAAOzE,QAAvB,UACI,2BAAU6E,SAAU,SAAAH,GAAK,OAAIsD,EAAsBtD,IAAQzG,KAAK,YAChE,yBAAQ2G,MAAOmD,EAAe5B,QAAS,kBAAM2B,KAA7C,2E,UCnBDsB,GAXE,SAAC,GAA2C,IAA1C7I,EAAyC,EAAzCA,WAAY8I,EAA6B,EAA7BA,cAAelF,EAAc,EAAdA,SAC1C,OACI,wBAAMA,SAAU,SAAAO,GAAK,OAAEP,EAASO,IAAhC,UACI,wBAAOC,QAAQ,UAAf,SACI,wBAAOE,SAAU,SAAAH,GAAK,OAAI2E,EAAc3E,EAAMkB,OAAOhB,QAAQA,MAAOrE,EAAYf,KAAK,OAC9EvB,KAAK,cAEhB,yBAAQuB,KAAK,SAAb,kECUG8J,GAdU,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,QAAShJ,EAAyC,EAAzCA,WAAY8I,EAA6B,EAA7BA,cAAelF,EAAc,EAAdA,SAC3D,OACI,eAAC,KAAD,CACIoF,QAASA,EACTC,MAAM,wIACNC,OAAQ,KAHZ,SAKI,eAAC,GAAD,CAAUtF,SAAUA,EAAU5D,WAAYA,EAAY8I,cAAeA,OC0DlEK,GA9DY,SAAC,GAA0C,IAAzCrB,EAAwC,EAAxCA,YAAaE,EAA2B,EAA3BA,YAAajB,EAAc,EAAdA,SAC7CqC,EAAgBtB,GAAY,GAC7BsB,EAAc5L,OACf4L,EAAcvE,QAAQO,KAAK,UAE/B+C,qBAAU,WACNH,GAAY,KACb,IAP8D,MAQbvD,qBARa,oBAQ1D4E,EAR0D,KAQtCC,EARsC,OAS7B7E,mBAAS,IAToB,oBAS1DzE,EAT0D,KAS9C8I,EAT8C,OAUrCrE,mBAAS,MAV4B,oBAU1D8E,EAV0D,KAUlDC,EAVkD,KA2CjE,OACI,uCACI,eAAC,GAAD,CAAWhC,cAAe6B,EACf5B,sBAnCW,SAACtD,GAC3BmF,EAAsBnF,EAAMkB,OAAOhB,QAmCpBkD,YAjCC,WAChB,IAAM9H,EAAU,CACZA,QAAS4J,EACT3L,KAAM0L,EAAc1L,KACpBE,OAAQwL,EAAcxL,OACtByJ,MAAM,IAAIe,MAAOC,qBACjB9K,GAAI6K,KAAKE,OAEbc,EAAcrK,SAASF,EAAsBY,KA0B9B+I,SAAUY,EAAcZ,SACxBd,cAAe0B,EAAc1B,cAC7B3I,SAAUqK,EAAcrK,SACxB0J,YA3BC,SAAC/I,GACjB,IAAMD,EAAU,CACZC,YACAhC,KAAM0L,EAAc1L,KACpBE,OAAQwL,EAAcxL,OACtByJ,MAAM,IAAIe,MAAOC,qBACjB9K,GAAI6K,KAAKE,OAEbc,EAAcrK,SAASS,EAAsBC,KAoB9BsH,SAAUA,EACVC,cAnBG,SAACnH,GACnBuJ,EAAczB,YAAW,GACzB6B,EAAU3J,MAmBLuJ,EAAcJ,SACf,eAAC,GAAD,CACIpF,SAnBK,SAACO,GACdA,EAAMY,iBACNqE,EAAczB,YAAW,GACzByB,EAAcrK,SAASgB,EAAiBwJ,EAAQvJ,KAgBpBA,WAAYA,EAAY8I,cAAeA,EAC3DnB,WAAYyB,EAAczB,WAAYqB,QAASI,EAAcJ,cCtDtES,GAAW1G,IAAX0G,QACDC,GAAgB,CAClBC,OAAQ,YACRC,QAAS,GACTC,UAAW,KAyBAC,OAtBf,YAA0D,IAAtChC,EAAqC,EAArCA,YAAaf,EAAwB,EAAxBA,SAAUiB,EAAc,EAAdA,YACvC,OACI,gBAAC,IAAD,CAAQzC,UAAU,cAAlB,UACI,eAAC,GAAD,IACA,gBAACkE,GAAD,CACIlE,UAAU,yBACVtB,MAAOyF,GAFX,UAII,eAAC,KAAD,CAAOK,KAAK,SAASC,OAAQ,kBAAM,eAAC,GAAD,OACnC,eAAC,KAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,eAAC,GAAD,OACrC,eAAC,KAAD,CAAOD,KAAK,aACLC,OAAQ,kBAAM,eAAC,GAAD,CAAmBjD,SAAUA,EACViB,YAAaA,EAAaF,YAAaA,OAC/E,eAAC,KAAD,CAAOiC,KAAK,cACLC,OAAQ,kBAAM,eAAC,GAAD,CAAoBjD,SAAUA,EACViB,YAAaA,EAAaF,YAAaA,cCQjFmC,OAjCf,WACI,IAAMpF,EAAUC,eACV/F,EAAW6F,cACXpH,EAAQuI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAK3E,SAC9CE,EAAOqI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAKzE,QAC7CC,EAAWoI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAKxE,YACjDC,EAASmI,aAAY,SAAA5F,GAAK,OAAIA,EAAM3C,MAAM2E,KAAKvE,UAC/CsM,EAAqBnE,aAAY,SAAA5F,GAAK,OAAIA,EAAMyB,KAAKJ,YACrD2I,EAAsBpE,aAAY,SAAA5F,GAAK,OAAIA,EAAMb,MAAMjB,aACvDC,EAAgByH,aAAY,SAAA5F,GAAK,OAAIA,EAAMb,MAAMhB,iBAT/B,EAUQmG,mBAAS,MAVjB,oBAUjBsC,EAViB,KAUPiB,EAVO,OAWMvD,oBAAS,GAXf,oBAWjBuE,EAXiB,KAWRrB,EAXQ,KA2BxB,OAAO,eAAC,GAAD,CACHZ,SAAUA,EAAUiB,YAAaA,EACjCF,YAfgB,SAACX,GACjB,MAAO,CACHtC,UACA9F,WACAvB,QACAE,KAAMyJ,EAAQzJ,EAAOC,EACrB6K,SAAUlK,EACVV,SACA8J,cAAeP,EAAQ+C,EAAqBC,EAC5CnB,UACArB,kBCbGyC,OAVf,WACI,OACI,gBAAC,IAAD,CAAQnG,MAAO,CAAC4F,UAAW,SAA3B,UACI,eAAC,GAAD,IACA,eAAC,GAAD,QCiBGQ,OApBf,WACI,IAAMtL,EAAW6F,cAejB,OAdAuD,qBAAU,WAEN,GAAIzH,aAAaC,QAAQ,QAAS,CAC9B,IAAMwB,EAAO/C,KAAK8B,MAAMR,aAAaC,QAAQ,SACzCnD,EAAQ2E,EAAK3E,MACbC,EAAW0E,EAAK1E,SAChB8I,EAAWpE,EAAKzE,KAChB4M,EAAenI,EAAKxE,SACpBC,EAASuE,EAAKvE,OAElBmB,EAASqD,EAAQ5E,EAAOC,EAAU8I,EAAU+D,EAAc1M,IAC1DkD,EAAmB,eAAgB,gBAAiB/B,MAEzD,IACI,eAAC,GAAD,KChBXwL,IAASP,OACL,eAAC,IAAMQ,WAAP,UACI,eAAC,IAAD,UACI,eAAC,IAAD,CAAU/H,MAAOA,EAAjB,SACI,eAAC,GAAD,UAIZgI,SAASC,eAAe,SAM5B7N,K,mBCtBAF,EAAOC,QAAU,CAAC,UAAY,4BAA4B,eAAiB,iCAAiC,KAAO,uBAAuB,OAAS,yBAAyB,QAAU,0BAA0B,QAAU,0BAA0B,UAAY,4BAA4B,SAAW,6B,mBCAvSD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,KAAO,sBAAsB,OAAS,wBAAwB,aAAe,8BAA8B,KAAO,sBAAsB,QAAU,yBAAyB,KAAO,wB,mBCA3OD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,sBAAsB,UAAY,4B","file":"static/js/main.db65195d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1M5wg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"customInput\":\"LoginForm_customInput__1F3TZ\"};","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/3.3e818eb2.jpg\";","export default __webpack_public_path__ + \"static/media/2jpg.e7dee65c.jpg\";","import a3 from '../components/commons/avatars/3.jpg'\r\nimport a2 from '../components/commons/avatars/2jpg.jpg'\r\nimport a1 from '../components/commons/avatars/1jpg.jpg'\r\nimport a4 from '../components/commons/avatars/4.jpg'\r\n\r\nconst users = [\r\n    {\r\n        id: \"0\",\r\n        login: \"aaa\",\r\n        password: \"111\",\r\n        name: 'Alex',\r\n        nickname: 'gamer228',\r\n        avatar: a1\r\n    },\r\n    {\r\n        id: \"1\",\r\n        login: \"bbb\",\r\n        password: \"222\",\r\n        name: 'Dima',\r\n        nickname: 'diman+100500',\r\n        avatar: a4\r\n    },\r\n    {\r\n        id: \"2\",\r\n        login: \"ccc\",\r\n        password: \"333\",\r\n        name: 'Olga',\r\n        nickname: 'i_like_cats',\r\n        avatar: a2\r\n    },\r\n    {\r\n        id: \"3\",\r\n        login: \"ddd\",\r\n        password: \"444\",\r\n        name: 'Elena',\r\n        nickname: 'boomer69',\r\n        avatar: a3\r\n    }\r\n]\r\nexport default users","export default __webpack_public_path__ + \"static/media/1jpg.57048de4.jpg\";","export default __webpack_public_path__ + \"static/media/4.00df587e.jpg\";","export default __webpack_public_path__ + \"static/media/st1.3d743afd.png\";","export default __webpack_public_path__ + \"static/media/st2.50bb353e.png\";","export default __webpack_public_path__ + \"static/media/st3.122d67dd.png\";","export default __webpack_public_path__ + \"static/media/st4.f986eda0.png\";","export default __webpack_public_path__ + \"static/media/st5.d5343850.png\";","import st1 from '../../components/commons/floodChatStickers/st1.png'\r\nimport st2 from '../../components/commons/floodChatStickers/st2.png'\r\nimport st3 from '../../components/commons/floodChatStickers/st3.png'\r\nimport st4 from '../../components/commons/floodChatStickers/st4.png'\r\nimport st5 from '../../components/commons/floodChatStickers/st5.png'\r\nimport {setMessageToLS} from \"../../components/helpers/helpers\";\r\n\r\nconst SET_FLOOD_MESSAGE = 'SET_FLOOD_MESSAGE'\r\nconst SET_FLOOD_MESSAGE_FROM_LS = 'SET_FLOOD_MESSAGE_FROM_LS'\r\nconst SEND_FLOOD_STICKER = 'SEND_FLOOD_STICKER'\r\nconst EDIT_FLOOD_MESSAGE = 'EDIT_FLOOD_MESSAGE'\r\nconst DELETE_FLOOD_MESSAGE = 'DELETE_FLOOD_MESSAGE'\r\n\r\nconst initialState = {\r\n    floodChat: [],\r\n    floodStickers: [\r\n        {sticker: st1, id: 0},\r\n        {sticker: st2, id: 1},\r\n        {sticker: st3, id: 2},\r\n        {sticker: st4, id: 3},\r\n        {sticker: st5, id: 4}\r\n    ]\r\n}\r\nconst floodChatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_FLOOD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                floodChat: [...state.floodChat, action.floodMessage]\r\n            }\r\n        case SEND_FLOOD_STICKER:\r\n            return {\r\n                ...state,\r\n                floodChat: [...state.floodChat, action.message]\r\n            }\r\n        case SET_FLOOD_MESSAGE_FROM_LS:\r\n            return {\r\n                ...state,\r\n                floodChat: action.messages\r\n            }\r\n        case DELETE_FLOOD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                floodChat: state.floodChat.filter(m => m.id !== action.messageId)\r\n            }\r\n        case EDIT_FLOOD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                floodChat: state.floodChat.map(m => {\r\n                    if (m.id == action.messageId) {\r\n                        return {\r\n                            ...m,\r\n                            message: action.newMessage\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport const setFloodMessage = (floodMessage) => ({type: SET_FLOOD_MESSAGE, floodMessage})\r\nexport const sendFloodSticker = (message) => ({type: SEND_FLOOD_STICKER, message})\r\nconst deleteFloodMessageAC = (messageId) => ({type: DELETE_FLOOD_MESSAGE, messageId})\r\nexport const setFloodMessagesFromLS = (messages) => ({type: SET_FLOOD_MESSAGE_FROM_LS, messages})\r\nconst editFloodMessageAC = (messageId, newMessage) => ({type: EDIT_FLOOD_MESSAGE, messageId, newMessage})\r\nexport const sendFloodMessageThunk = (floodMessage) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(setFloodMessage(floodMessage))\r\n        const chat = JSON.stringify(getState().flood.floodChat)\r\n        setMessageToLS('floodMessages', chat)\r\n    }\r\n}\r\nexport const sendFloodStickerThunk = (message) => {\r\n    return (dispatch, getState) => {\r\n        message.sticker = getState().flood.floodStickers[message.stickerId]\r\n        dispatch(sendFloodSticker(message))\r\n        const chat = JSON.stringify(getState().flood.floodChat)\r\n        setMessageToLS('floodMessages', chat)\r\n    }\r\n}\r\nexport const deleteFloodMessage = (messageId) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(deleteFloodMessageAC(messageId))\r\n        const chat = JSON.stringify(getState().flood.floodChat)\r\n        setMessageToLS('floodMessages', chat)\r\n    }\r\n}\r\nexport const editFloodMessage = (id, newMessage) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(editFloodMessageAC(id, newMessage))\r\n        const chat = JSON.stringify(getState().flood.floodChat)\r\n        setMessageToLS('floodMessages', chat)\r\n    }\r\n}\r\n\r\nexport default floodChatReducer","import {deleteWorkMessage, setMessagesFromLS} from \"../../redux/reducers/workChatReducer\";\r\nimport {deleteFloodMessage, setFloodMessagesFromLS} from \"../../redux/reducers/floodChatReducer\";\r\n\r\nexport const setMessageToLS = (item, chat) => {\r\n    if (localStorage.getItem(item)) {\r\n        localStorage.removeItem(item)\r\n        localStorage.setItem(item, chat)\r\n    } else {\r\n        localStorage.setItem(item, chat)\r\n    }\r\n}\r\n\r\nexport const takeMessagesFromLS = (item1, item2, dispatch) => {\r\n    const workMessages = JSON.parse(localStorage.getItem(item1))\r\n    const floodMessages = JSON.parse(localStorage.getItem(item2))\r\n    debugger\r\n    if (!!workMessages) {\r\n        dispatch(setMessagesFromLS(workMessages))\r\n    }\r\n    if (!!floodMessages) {\r\n        dispatch(setFloodMessagesFromLS(floodMessages))\r\n    }\r\n}\r\nexport const deleteMessage = (messageId, param, dispatch,) => {\r\n    if (param) {\r\n        dispatch(deleteWorkMessage(messageId))\r\n    } else {\r\n        dispatch(deleteFloodMessage(messageId))\r\n    }\r\n}\r\n","import {setMessageToLS} from \"../../components/helpers/helpers\";\r\n\r\nconst SET_WORK_MESSAGE = 'SET_WORK_MESSAGE'\r\nconst SET_WORK_MESSAGE_FROM_LS = 'SET_WORK_MESSAGE_FROM_LS'\r\nconst DELETE_WORK_MESSAGE = 'DELETE_WORK_MESSAGE'\r\nconst initialState = {\r\n    workChat: [],\r\n}\r\nconst workChatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_WORK_MESSAGE:\r\n            return {\r\n                ...state,\r\n                workChat: [...state.workChat, action.workMessage]\r\n            }\r\n        case SET_WORK_MESSAGE_FROM_LS:\r\n            return {\r\n                ...state,\r\n                workChat: action.messages\r\n            }\r\n        case DELETE_WORK_MESSAGE:\r\n            return {\r\n                ...state,\r\n                workChat: state.workChat.filter(m => m.id !== action.messageId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setMessage = (workMessage) => ({type: SET_WORK_MESSAGE, workMessage})\r\nexport const setMessagesFromLS = (messages) => ({type: SET_WORK_MESSAGE_FROM_LS, messages})\r\nconst deleteWorkMessageAC = (messageId) => ({type: DELETE_WORK_MESSAGE, messageId})\r\nexport const sendMessageThunk = (workMessage) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(setMessage(workMessage))\r\n        const chat = JSON.stringify(getState().work.workChat)\r\n        setMessageToLS('workMessages', chat)\r\n    }\r\n}\r\nexport const deleteWorkMessage = (messageId) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(deleteWorkMessageAC(messageId))\r\n        const chat = JSON.stringify(getState().work.workChat)\r\n        setMessageToLS('workMessages', chat)\r\n    }\r\n}\r\n\r\nexport default workChatReducer","import users from \"../users\";\r\nimport {setMessagesFromLS} from \"./workChatReducer\";\r\nimport {setFloodMessagesFromLS} from \"./floodChatReducer\";\r\nimport {takeMessagesFromLS} from \"../../components/helpers/helpers\";\r\n\r\nconst LOGIN = \"LOGIN\"\r\nconst LOG_OUT = \"LOG_OUT\"\r\nconst USERS = users;\r\nconst initialState = {\r\n    user: {\r\n        login: null,\r\n        password: null,\r\n        name: null,\r\n        nickname: null,\r\n        avatar: null\r\n    }\r\n}\r\nconst loginReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    login: action.login,\r\n                    password: action.password,\r\n                    name: action.name,\r\n                    nickname: action.nickname,\r\n                    avatar: action.avatar\r\n                }\r\n            }\r\n        case LOG_OUT:\r\n            return {\r\n                ...state,\r\n                user: {login: null, password: null, token: null}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const loginAC = (login, password, name, nickname, avatar) => ({\r\n    type: LOGIN,\r\n    login,\r\n    password,\r\n    name,\r\n    nickname,\r\n    avatar\r\n})\r\nexport const logoutAC = () => ({type: LOG_OUT})\r\n\r\nexport const loginThunk = (login, password) => {\r\n    return (dispatch, getState) => {\r\n        //поиск нужного пользователя в users.js\r\n        USERS.forEach(u => {\r\n            if (u.login === login && u.password === password) {\r\n                //Логинизация\r\n                dispatch(loginAC(login, password, u.name, u.nickname, u.avatar))\r\n                //сохраняю юзера в стораж, чтобы использовать useEffect в appContainer\r\n                const user = getState().login.user\r\n                localStorage.setItem(\"user\", JSON.stringify(user))\r\n                //собираю сообщения, если они есть\r\n                takeMessagesFromLS('workMessages', 'floodMessages', dispatch)\r\n                alert(\"Вы вошли!\")\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default loginReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport loginReducer from \"./reducers/loginReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport workChatReducer from \"./reducers/workChatReducer\";\r\nimport floodChatReducer from \"./reducers/floodChatReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    work: workChatReducer,\r\n    flood: floodChatReducer\r\n})\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\nwindow.store = store\r\nexport default store","import {Layout, Menu} from 'antd';\r\nimport React from 'react'\r\nimport {SmileOutlined, UserOutlined, ApartmentOutlined} from '@ant-design/icons';\r\nimport 'antd/dist/antd.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst {Sider} = Layout;\r\n\r\nfunction SiderFC() {\r\n    return (\r\n        <Sider trigger={null} collapsible>\r\n            <Menu theme=\"dark\" mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<UserOutlined/>}>\r\n                    <NavLink to='/profile'>Профиль</NavLink>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<ApartmentOutlined/>}>\r\n                    <NavLink to='/work-chat'>Рабочий чат</NavLink>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<SmileOutlined/>}>\r\n                    <NavLink to='/flood-chat'>Не рабочий чат</NavLink>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n}\r\n\r\n\r\nexport default SiderFC;\r\n","import React from \"react\";\r\nimport styles from './LoginForm.module.css'\r\n\r\n\r\nconst LoginForm = ({onSubmit,loginValue,passwordValue, onLoginChange, onPasswordChange}) => {\r\n    return (\r\n        <form style={styles} onSubmit={event => onSubmit(event)}>\r\n            <label htmlFor=\"login\">\r\n                <input value={loginValue} onChange={event => onLoginChange(event)} type=\"text\" placeholder='Введите свой логин'/>\r\n            </label>\r\n            <label htmlFor=\"password\">\r\n                <input value={passwordValue} onChange={event => onPasswordChange(event)} type=\"text\" placeholder='Введите свой пароль'/>\r\n            </label>\r\n            <button type='submit'>Войти</button>\r\n        </form>\r\n    )\r\n}\r\nexport default LoginForm","import React, {useState} from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginThunk} from \"../../redux/reducers/loginReducer\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst LoginFormContainer = () => {\r\n    const [login, setLogin] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const onLoginChange = (event) => {\r\n        setLogin(event.target.value)\r\n    }\r\n    const onPasswordChange = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        dispatch(loginThunk(login, password))\r\n        history.push('/profile')\r\n    }\r\n    return <LoginForm passwordValue={password} loginValue={login} onSubmit={onSubmit}\r\n                      onPasswordChange={onPasswordChange} onLoginChange={onLoginChange}/>\r\n}\r\nexport default LoginFormContainer;","import styles from './Login.module.css'\r\nimport LoginFormContainer from \"../LoginForm/LoginFormContainer\";\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <LoginFormContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import {Layout} from 'antd';\r\nimport React from 'react'\r\nimport styles from './Header.module.css'\r\nimport 'antd/dist/antd.css'\r\n\r\nconst {Header} = Layout;\r\n\r\nfunction HeaderFC({logout,login}) {\r\n    return (\r\n        <Header className=\"site-layout-background\">\r\n            <div className={styles.container}>\r\n                <div className={styles.login}>{!!login?`Ваш логин: ${login}`:'Авторизуйтесь'}</div>\r\n                <span onClick={() => logout()} className={styles.login_btn}>Выйти</span>\r\n            </div>\r\n        </Header>\r\n    )\r\n}\r\n\r\n\r\nexport default HeaderFC;\r\n","import React from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport HeaderFC from \"./Header\";\r\nimport {logoutAC} from \"../../../redux/reducers/loginReducer\";\r\n\r\nfunction HeaderContainer() {\r\n    const dispatch = useDispatch()\r\n    const login = useSelector(state => state.login.user.login)\r\n    const logout = () => {\r\n        dispatch(logoutAC())\r\n        localStorage.removeItem('user')\r\n        alert(\"Вы вышли\")\r\n    }\r\n    return (\r\n        <HeaderFC logout={logout} login={login}/>\r\n    )\r\n}\r\n\r\n\r\nexport default HeaderContainer;\r\n","const avatarStyles = {\r\n    maxWidth: \"300px\",\r\n    maxHeight: \"400px\"\r\n}\r\nconst Avatar = ({avatar}) => {\r\n    return (\r\n        <div>\r\n            <img style={avatarStyles} src={avatar} alt='avatar'/>\r\n        </div>\r\n    )\r\n}\r\nexport default Avatar","const ProfileInfo = ({userName, login, nickname}) => {\r\n    return (\r\n        <div>\r\n            <h2>{`Ваше имя: ${userName}`}</h2>\r\n            <h2>{`Ваше никнейм: ${nickname}`}</h2>\r\n            <h2>{`Ваше логин: ${login}`}</h2>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","import Avatar from \"./profileComponents/Avatar\";\r\nimport ProfileInfo from \"./profileComponents/ProfileInfo\";\r\n\r\nconst styles = {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    maxWidth: \"800px\"\r\n}\r\nconst Profile = ({avatar, userName, login, nickname}) => {\r\n    return (\r\n        <div style={styles}>\r\n            <Avatar avatar={avatar}/>\r\n            <ProfileInfo userName={userName} nickname={nickname} login={login}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import Profile from \"./Profile\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst ProfileContainer = () => {\r\n    const history = useHistory()\r\n    const avatar = useSelector(state => state.login.user.avatar)\r\n    const userName = useSelector(state => state.login.user.name)\r\n    const nickname = useSelector(state => state.login.user.nickname)\r\n    const login = useSelector(state => state.login.user.login)\r\n    if (!login) {\r\n        history.push('/login')\r\n    }\r\n    return <Profile avatar={avatar} nickname={nickname} userName={userName} login={login}/>\r\n}\r\nexport default ProfileContainer","import styles from '../WorkChat/WorkChat.module.css'\r\n\r\nconst StickerMessage = ({sticker}) => {\r\n    return (\r\n        <div>\r\n            <img className={`${styles.sticker} ${styles.sticker_m}`} src={sticker} alt=\"sticker\"/>\r\n        </div>\r\n    )\r\n}\r\nexport default StickerMessage","import styles from './Message.module.css'\r\nimport StickerMessage from \"../Stickers/StickerMessage\";\r\nimport {deleteMessage} from \"../helpers/helpers\";\r\n\r\nconst Message = ({m, dispatch, actionId, onEditMessage}) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.main}>\r\n                <div className={styles.avatar}>\r\n                    <img className={styles.avatar} src={m.avatar}/>\r\n                </div>\r\n                <div className={styles.main_message}>\r\n                    <div className={styles.name}>{m.name}</div>\r\n                    {m.sticker ? <StickerMessage sticker={m.sticker.sticker}/> :\r\n                        <div className={styles.message}>{m.message}</div>}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span onClick={() => onEditMessage(m.id)}>РЕД</span>\r\n                <span onClick={() => deleteMessage(m.id, actionId, dispatch)}>УДАЛ</span>\r\n                <div className={styles.date}>{m.date}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Message","import styles from './WorkChat.module.css'\r\nimport Message from \"../Message/Message\";\r\n\r\nconst WorkChat = ({\r\n                      sendMessage,\r\n                      textAreaValue,\r\n                      onTextAreaValueChange,\r\n                      messagesArray,\r\n                      dispatch,\r\n                      actionId,\r\n                      setVisible\r\n                  }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2>Это рабочий чат. Здесь вы можете обсуждать рабочий процесс</h2>\r\n            <div className={styles.chat_container}>\r\n                <div className={styles.chat}>\r\n                    {!!messagesArray ? messagesArray.map(m => <Message setVisible={setVisible} actionId={actionId}\r\n                                                                       dispatch={dispatch} key={m.id}\r\n                                                                       m={m}/>) : \"Сообщений нет\"}\r\n                </div>\r\n            </div>\r\n            <div className={styles.message}>\r\n                <textarea onChange={event => onTextAreaValueChange(event)} name=\"message\"/>\r\n                <button value={textAreaValue} onClick={() => sendMessage()}>Отправить</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default WorkChat","import WorkChat from \"./WorkChat\";\r\nimport {sendMessageThunk} from \"../../redux/reducers/workChatReducer\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst WorkChatContainer = ({getChatData, deleteId, actionId, setActionId}) => {\r\n    const [textAreaValue, setTextAreaValue] = useState()\r\n    const workChatData = getChatData(true)\r\n    useEffect(() => {\r\n        setActionId(true)\r\n    }, [])\r\n    if (!workChatData.login) {\r\n        workChatData.history.push('/login')\r\n    }\r\n    const onTextAreaValueChange = (event) => {\r\n        setTextAreaValue(event.target.value)\r\n    }\r\n    const sendMessage = () => {\r\n        const message = {\r\n            message: textAreaValue,\r\n            name: workChatData.name,\r\n            avatar: workChatData.avatar,\r\n            date: new Date().toLocaleTimeString(),\r\n            id: Date.now()\r\n        }\r\n        workChatData.dispatch(sendMessageThunk(message))\r\n    }\r\n    return <WorkChat textAreaValue={textAreaValue}\r\n                     onTextAreaValueChange={onTextAreaValueChange}\r\n                     sendMessage={sendMessage}\r\n                     dispatch={workChatData.dispatch}\r\n                     messagesArray={workChatData.messagesArray}\r\n                     deleteId={deleteId}\r\n                     actionId={actionId}\r\n                     setVisible={workChatData.setVisible}\r\n    />\r\n}\r\nexport default WorkChatContainer","import styles from \"../WorkChat/WorkChat.module.css\";\r\n\r\nconst Stickers = ({stickers, sendSticker}) => {\r\n    return (\r\n        <div className={styles.stickers}>\r\n            {stickers.map(s => <img onClick={() => sendSticker(s.id)} id={s.id} className={styles.sticker}\r\n                                    alt='sticker'\r\n                                    src={s.sticker}/>)}\r\n        </div>\r\n    )\r\n}\r\nexport default Stickers","import styles from '../WorkChat/WorkChat.module.css'\r\nimport Message from \"../Message/Message\";\r\nimport Stickers from \"../Stickers/Stickers\";\r\n\r\nconst FloodChat = ({\r\n                       sendMessage,\r\n                       textAreaValue,\r\n                       onTextAreaValueChange,\r\n                       messagesArray,\r\n                       stickers,\r\n                       sendSticker,\r\n                       actionId,\r\n                       dispatch,\r\n                       onEditMessage\r\n                   }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2>Это не рабочий чат. Здесь вы можете общаться на нерабочие темы</h2>\r\n            <div className={styles.chat_container}>\r\n                <div className={styles.chat_f}>\r\n                    {!!messagesArray && messagesArray.map(m => <Message\r\n                        onEditMessage={onEditMessage}\r\n                        dispatch={dispatch}\r\n                        actionId={actionId}\r\n                        m={m}/>)}\r\n                </div>\r\n                <Stickers sendSticker={sendSticker} stickers={stickers}/>\r\n            </div>\r\n            <div className={styles.message}>\r\n                <textarea onChange={event => onTextAreaValueChange(event)} name=\"message\"/>\r\n                <button value={textAreaValue} onClick={() => sendMessage()}>Отправить</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default FloodChat","const EditForm = ({newMessage, setNewMessage, onSubmit}) => {\r\n    return (\r\n        <form onSubmit={event=>onSubmit(event)}>\r\n            <label htmlFor=\"message\">\r\n                <input onChange={event => setNewMessage(event.target.value)} value={newMessage} type=\"text\"\r\n                       name='message'/>\r\n            </label>\r\n            <button type='submit'>Изменить</button>\r\n        </form>\r\n    );\r\n}\r\nexport default EditForm","import {Modal} from 'antd';\r\nimport EditForm from \"./EditForm\";\r\n\r\nconst EditMessageModal = ({visible, newMessage, setNewMessage, onSubmit}) => {\r\n    return (\r\n        <Modal\r\n            visible={visible}\r\n            title=\"Редактировать сообщение\"\r\n            footer={null}\r\n        >\r\n            <EditForm onSubmit={onSubmit} newMessage={newMessage} setNewMessage={setNewMessage}/>\r\n        </Modal>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default EditMessageModal","import FloodChat from \"./FloodChat\";\r\nimport {useState} from \"react\";\r\nimport {editFloodMessage, sendFloodMessageThunk, sendFloodStickerThunk} from \"../../redux/reducers/floodChatReducer\";\r\nimport {useEffect} from \"react\";\r\nimport EditMessageModal from \"../EditForm/EditMessageModal\";\r\n\r\nconst FloodChatContainer = ({getChatData, setActionId, actionId}) => {\r\n    const floodChatData = getChatData(false)\r\n    if (!floodChatData.login) {\r\n        floodChatData.history.push('/login')\r\n    }\r\n    useEffect(() => {\r\n        setActionId(false)\r\n    }, [])\r\n    const [floodTextAreaValue, setFloodTextAreaValue] = useState()\r\n    const [newMessage, setNewMessage] = useState(\"\")\r\n    const [messId, setMessId] = useState(null)\r\n    const onTextAreaValueChange = (event) => {\r\n        setFloodTextAreaValue(event.target.value)\r\n    }\r\n    const sendMessage = () => {\r\n        const message = {\r\n            message: floodTextAreaValue,\r\n            name: floodChatData.name,\r\n            avatar: floodChatData.avatar,\r\n            date: new Date().toLocaleTimeString(),\r\n            id: Date.now()\r\n        }\r\n        floodChatData.dispatch(sendFloodMessageThunk(message))\r\n    }\r\n    const sendSticker = (stickerId) => {\r\n        const message = {\r\n            stickerId,\r\n            name: floodChatData.name,\r\n            avatar: floodChatData.avatar,\r\n            date: new Date().toLocaleTimeString(),\r\n            id: Date.now()\r\n        }\r\n        floodChatData.dispatch(sendFloodStickerThunk(message))\r\n    }\r\n    const onEditMessage = (messageId) => {\r\n        floodChatData.setVisible(true)\r\n        setMessId(messageId)\r\n    }\r\n    const onSubmit = (event) => {\r\n        event.preventDefault()\r\n        floodChatData.setVisible(false)\r\n        floodChatData.dispatch(editFloodMessage(messId, newMessage))\r\n    }\r\n    return (\r\n        <>\r\n            <FloodChat textAreaValue={floodTextAreaValue}\r\n                       onTextAreaValueChange={onTextAreaValueChange}\r\n                       sendMessage={sendMessage}\r\n                       stickers={floodChatData.stickers}\r\n                       messagesArray={floodChatData.messagesArray}\r\n                       dispatch={floodChatData.dispatch}\r\n                       sendSticker={sendSticker}\r\n                       actionId={actionId}\r\n                       onEditMessage={onEditMessage}\r\n            />\r\n            {floodChatData.visible &&\r\n            <EditMessageModal\r\n                onSubmit={onSubmit} newMessage={newMessage} setNewMessage={setNewMessage}\r\n                setVisible={floodChatData.setVisible} visible={floodChatData.visible}/>}\r\n        </>\r\n    )\r\n}\r\nexport default FloodChatContainer","import {Layout} from 'antd';\r\nimport React from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport {Route} from 'react-router-dom'\r\nimport Login from \"../Login/Login\";\r\nimport HeaderContainer from \"./Header/HeaderContainer\";\r\nimport ProfileContainer from \"../Profile/ProfileContainer\";\r\nimport WorkChatContainer from \"../WorkChat/WorkChatContainer\";\r\nimport FloodChatContainer from \"../FloodChat/FloodChatContainer\";\r\n\r\nconst {Content} = Layout;\r\nconst contentStyles = {\r\n    margin: '24px 16px',\r\n    padding: 24,\r\n    minHeight: 280,\r\n}\r\n\r\nfunction ContentFC({getChatData, actionId, setActionId}) {\r\n    return (\r\n        <Layout className=\"site-layout\">\r\n            <HeaderContainer/>\r\n            <Content\r\n                className=\"site-layout-background\"\r\n                style={contentStyles}\r\n            >\r\n                <Route path='/login' render={() => <Login/>}/>\r\n                <Route path='/profile' render={() => <ProfileContainer/>}/>\r\n                <Route path='/work-chat'\r\n                       render={() => <WorkChatContainer actionId={actionId}\r\n                                                        setActionId={setActionId} getChatData={getChatData}/>}/>\r\n                <Route path='/flood-chat'\r\n                       render={() => <FloodChatContainer actionId={actionId}\r\n                                                         setActionId={setActionId} getChatData={getChatData}/>}/>\r\n            </Content>\r\n        </Layout>\r\n    );\r\n}\r\n\r\n\r\nexport default ContentFC;\r\n","import React, {useState} from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport ContentFC from \"./Content\";\r\nimport {useHistory} from \"react-router\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nfunction ContentContainer() {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const login = useSelector(state => state.login.user.login)\r\n    const name = useSelector(state => state.login.user.name)\r\n    const nickname = useSelector(state => state.login.user.nickname)\r\n    const avatar = useSelector(state => state.login.user.avatar)\r\n    const messagesOfWorkChat = useSelector(state => state.work.workChat)\r\n    const messagesOfFloodChat = useSelector(state => state.flood.floodChat)\r\n    const floodStickers = useSelector(state => state.flood.floodStickers)\r\n    const [actionId, setActionId] = useState(null)\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    //Собираю данные для компонент FloodChat и WorkChat в зависимости от параметра\r\n    const getChatData = (param) => {\r\n        return {\r\n            history,\r\n            dispatch,\r\n            login,\r\n            name: param ? name : nickname,\r\n            stickers: floodStickers,\r\n            avatar,\r\n            messagesArray: param ? messagesOfWorkChat : messagesOfFloodChat,\r\n            visible,\r\n            setVisible\r\n        }\r\n    }\r\n    return <ContentFC\r\n        actionId={actionId} setActionId={setActionId}\r\n        getChatData={getChatData}/>\r\n}\r\n\r\n\r\nexport default ContentContainer;\r\n","import './App.css';\r\nimport {Layout} from 'antd';\r\nimport React from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport SiderFC from \"./components/Sider/Sider\";\r\nimport ContentContainer from \"./components/Content/ContentContainer\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Layout style={{minHeight: '100vh'}}>\r\n            <SiderFC/>\r\n            <ContentContainer/>\r\n        </Layout>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","import './App.css';\r\nimport React, {useEffect} from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport App from \"./App\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginAC} from \"./redux/reducers/loginReducer\";\r\nimport {takeMessagesFromLS} from \"./components/helpers/helpers\";\r\n\r\n\r\nfunction AppContainer() {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        //собираю пользователя, чтобы при обновлении страницы он не вылетал с сервиса\r\n        if (localStorage.getItem(\"user\")) {\r\n            const user = JSON.parse(localStorage.getItem(\"user\"))\r\n            let login = user.login\r\n            let password = user.password\r\n            let userName = user.name\r\n            let userNickname = user.nickname\r\n            let avatar = user.avatar\r\n            //AC=ActionCreator, логиню заново , при обновлении\r\n            dispatch(loginAC(login, password, userName, userNickname, avatar))\r\n            takeMessagesFromLS('workMessages', 'floodMessages', dispatch)\r\n        }\r\n    }, [])\r\n    return <App/>\r\n}\r\n\r\n\r\nexport default AppContainer\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport AppContainer from \"./AppContainer\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WorkChat_container__2Nl_R\",\"chat_container\":\"WorkChat_chat_container__2wUig\",\"chat\":\"WorkChat_chat__2YAnM\",\"chat_f\":\"WorkChat_chat_f__hZABw\",\"message\":\"WorkChat_message__10FHf\",\"sticker\":\"WorkChat_sticker__3MGhg\",\"sticker_m\":\"WorkChat_sticker_m__1308Q\",\"stickers\":\"WorkChat_stickers__1y-8s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Message_container__pbhLb\",\"main\":\"Message_main__1jOAx\",\"avatar\":\"Message_avatar__2qdJK\",\"main_message\":\"Message_main_message__3lSKl\",\"name\":\"Message_name__3K4E7\",\"message\":\"Message_message__3GBYI\",\"date\":\"Message_date__36Km6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__2S4Zu\",\"login\":\"Header_login__Kk3Bx\",\"login_btn\":\"Header_login_btn__1Jz_S\"};"],"sourceRoot":""}